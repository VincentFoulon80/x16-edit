\ *** ÂLOCK ÎO. 5, ÈEXBLOCK 5\ ÆORTH-6502 ÁSSEMBLER        CLV10OCT87\ ÂASIS: ÆORTH ÄIMENSIONS ÖÏÌ ÉÉÉ ÎO. 5)ÏNLYFORTH  ÁSSEMBLER ALSO DEFINITIONS\ *** ÂLOCK ÎO. 6, ÈEXBLOCK 6\ ÆORTH-83 6502-ÁSSEMBLER      20OCT87RE: END-CODE   CONTEXT 2- @  CONTEXT ! ;ÃREATE INDEX$0909 , $1505 , $0115 , $8011 ,$8009 , $1Ä0Ä , $8019 , $8080 ,$0080 , $1404 , $8014 , $8080 ,$8080 , $1Ã0Ã , $801Ã , $2Ã80 ,Ü ÖARIABLE MODE: ÍODE:  ( N -)   ÃREATE C,  ÄOES>  ( -)     C@ MODE ! ;0   ÍODE: .Á        1    ÍODE: #2 Ü ÍODE: MEM       3    ÍODE: ,Ø4   ÍODE: ,Ù        5    ÍODE: Ø)6   ÍODE: )Ù       $Æ    ÍODE: )\ *** ÂLOCK ÎO. 7, ÈEXBLOCK 7\ UPMODE  CPU                  20OCT87REÜ : UPMODE ( ADDR0 F0 - ADDR1 F1) ÉÆ MODE @  8 OR MODE !   ÔÈÅÎ 1 MODE @  $Æ AND ?DUP ÉÆ 0 ÄÏ  DUP +  ÌÏÏÐ ÔÈÅÎ OVER 1+ @ AND 0= ;: CPU  ( 8B -)   ÃREATE  C,  ÄOES>  ( -)    C@ C, MEM ; 00 CPU BRK $18 CPU CLC $Ä8 CPU CLD$58 CPU CLI $Â8 CPU CLV $ÃÁ CPU DEX$88 CPU DEY $Å8 CPU INX $Ã8 CPU INY$ÅÁ CPU NOP $48 CPU PHA $08 CPU PHP$68 CPU PLA $28 CPU PLP $40 CPU RTI$60 CPU RTS $38 CPU SEC $Æ8 CPU SED$78 CPU SEI $ÁÁ CPU TAX $Á8 CPU TAY$ÂÁ CPU TSX $8Á CPU TXA $9Á CPU TXS$98 CPU TYA\ *** ÂLOCK ÎO. 8, ÈEXBLOCK 8\ M/CPU                        20OCT87RE: M/CPU  ( MODE OPCODE -)  ÃREATE C, , ÄOES> DUP 1+ @ $80 AND ÉÆ $10 MODE +! ÔÈÅÎ OVER $ÆÆ00 AND UPMODE UPMODE ÉÆ MEM TRUE ÁBORT" INVALID" ÔÈÅÎ C@ MODE @ INDEX + C@ + C, MODE @ 7 AND ÉÆ MODE @  $Æ AND 7 <  ÉÆ C, ÅÌÓÅ , ÔÈÅÎ ÔÈÅÎ MEM ;$1Ã6Å $60 M/CPU ADC $1Ã6Å $20 M/CPU AND$1Ã6Å $Ã0 M/CPU CMP $1Ã6Å $40 M/CPU EOR$1Ã6Å $Á0 M/CPU LDA $1Ã6Å $00 M/CPU ORA$1Ã6Å $Å0 M/CPU SBC $1Ã6Ã $80 M/CPU STA$0Ä0Ä $01 M/CPU ASL $0Ã0Ã $Ã1 M/CPU DEC$0Ã0Ã $Å1 M/CPU INC $0Ä0Ä $41 M/CPU LSR$0Ä0Ä $21 M/CPU ROL $0Ä0Ä $61 M/CPU ROR$0414 $81 M/CPU STX $0486 $Å0 M/CPU CPX$0486 $Ã0 M/CPU CPY $1496 $Á2 M/CPU LDX$0Ã8Å $Á0 M/CPU LDY $048Ã $80 M/CPU STY$0480 $14 M/CPU JSR $8480 $40 M/CPU JMP$0484 $20 M/CPU BIT\ *** ÂLOCK ÎO. 9, ÈEXBLOCK 9\ ÁSSEMBLER CONDITIONALS       20OCT87REÜ : RANGE?   ( BRANCH -- BRANCH ) DUP ABS  $7Æ U> ÁBORT" OUT OF RANGE " ;: [[  ( ÂÅÇÉÎ)  HERE ;: ?]  ( ÕÎÔÉÌ)  C, HERE 1+ - RANGE? C, ;: ?[  ( ÉÆ)     C,  HERE 0 C, ;: ?[[ ( ×ÈÉÌÅ)  ?[ SWAP ;: ]?  ( ÔÈÅÎ)   HERE OVER C@  ÉÆ SWAP ! ÅÌÓÅ OVER 1+ - RANGE? SWAP C! ÔÈÅÎ ;: ][  ( ÅÌÓÅ)   HERE 1+   1 JMP SWAP HERE OVER 1+ - RANGE?  SWAP C! ;: ]]  ( ÁÇÁÉÎ)  JMP ;: ]]? ( ÒÅÐÅÁÔ) JMP ]? ;\ *** ÂLOCK ÎO. 10, ÈEXBLOCK A\ ÁSSEMBLER CONDITIONALS       20OCT87RE$90 ÃONSTANT ÃÓ     $Â0 ÃONSTANT ÃÃ$Ä0 ÃONSTANT 0=     $Æ0 ÃONSTANT 0<>$10 ÃONSTANT 0<     $30 ÃONSTANT 0>=$50 ÃONSTANT ÖÓ     $70 ÃONSTANT ÖÃ: NOT    $20 [ ÆORTH ] XOR ;: BEQ    0<> ?] ;   : BMI   0>= ?] ;: BNE    0=  ?] ;   : BPL   0<  ?] ;: BCC    ÃÓ  ?] ;   : BVC   ÖÓ  ?] ;: BCS    ÃÃ  ?] ;   : BVS   ÖÃ  ?] ;\ *** ÂLOCK ÎO. 11, ÈEXBLOCK B\ 2INC/2DEC   WINC/WDEC        20OCT87RE: 2INC  ( ADR -- ) DUP LDA  CLC  2 # ADC DUP STA  ÃÓ ?[  SWAP 1+ INC  ]?  ;: 2DEC  ( ADR -- ) DUP LDA  SEC  2 # SBC DUP STA  ÃÃ ?[  SWAP 1+ DEC  ]?  ;: WINC  ( ADR -- ) DUP INC  0= ?[  SWAP 1+ INC  ]?  ;: WDEC  ( ADR -- ) DUP LDA  0= ?[  OVER 1+ DEC  ]?  DEC  ;: ;C: RECOVER JSR  END-CODE ]  0 LAST !  0 ;\ *** ÂLOCK ÎO. 12, ÈEXBLOCK C\ ;CODE ÃODE CODE>          BP/RE03FEB85ÏNLYFORTH: ÁSSEMBLER ÁSSEMBLER   [ ÁSSEMBLER ] MEM ;: ;ÃODE [COMPILE] ÄOES>  -3 ALLOT [COMPILE] ;      -2 ALLOT   ÁSSEMBLER ;IMMEDIATE: ÃODE  ÃREATE HERE DUP 2- ! ÁSSEMBLER ;: >LABEL  ( ADR -) HERE Ü ÃREATE  IMMEDIATE  SWAP , 4 HALLOT HEAP 1 AND HALLOT ( 6502-ALIG) HERE 4 - HEAP  4  CMOVE HEAP LAST @ COUNT $1Æ AND + !  DP !  ÄOES>  ( - ADR)   @  STATE @ ÉÆ  [COMPILE] ÌITERAL  ÔÈÅÎ ;: ÌABEL [ ÁSSEMBLER ]  HERE >LABEL ÁSSEMBLER ;\ ÔÏÄÏ(PZEMBROD): ENABLE ONCE ROM-RAM-SYS.FTH WORKS WITH INCLUDE\ INCLUDE ROM-RAM-SYS.FTH \ ÍAKROS: ROM RAM SYSÏNLYFORTH